{
  "swagger": "2.0",
  "info": {
    "title": "commercetools payment microservice",
    "description": "Control API of the Integration of the commercetools platform with a Payment Service Provider API",
    "version": "1.0.0"
  },
  "host": "(projectId).(pspName)-payments.commercetools.io",
  "schemes": [
    "https",
    "http"
  ],
  "basePath": "/api/v1/",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/commercetools/handle/{resource}/{id}": {
      "get": {
        "summary": "Trigger to force handling of a commerceotols payment object.\nPassing the Cart or Order instead of the Payment ID enables a more efficient implementation and is therefore preferable.\nSituations that are formally valid in commercetools, but are not supported (and dubious anyways):\n1. Cart / Order passed that referenced more than one Payment. Please do separate Calls per Payment and pass Payment id.\n2. Payments that are referenced by more than one Cart or more than one Order\n3. Cart / Order and Payment Resource reference different Customers\n",
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "description": "The resource type the given ID refers to.",
            "required": true,
            "type": "string",
            "enum": [
              "cart",
              "order",
              "payment"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "commercetools id of the Payment that should be handled or the Cart or Order whose referenced payment(s) should be handled.",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentVersion",
            "in": "query",
            "description": "Last known version of the Payment to be handled. Protects against concurrent modification an not-yet-consistent state of the CT platform. Also required of \"handle\" is called via an Order or Cart ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "orderOrCartVersion",
            "in": "query",
            "description": "Last known version of the Order to be handled. Protects against concurrent modification an not-yet-consistent state of the CT platform. Applies to the Order if a) handle is called on an Order b) handle is called on a Payment that is already referenced by an Order. Applies to a Cart if a) handle is called on an Order b) handle is called on a Payment that is not yet referenced from an Order, but referenced from a Cart.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerVersion",
            "in": "query",
            "description": "Optional last known version of the Customer to be handled. Protects against concurrent modification an not-yet-consistent state of the CT platform. Recommended to pass in non-guest checkouts.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Found the resource and successfully handled it.",
            "schema": {
              "$ref": "#/definitions/PaymentStatus"
            }
          },
          "202": {
            "description": "Found the resource, but the payment API could not immediately complete the necessary actions. Please try again later with the identical request.",
            "schema": {
              "$ref": "#/definitions/PaymentStatus"
            }
          },
          "400": {
            "description": "One of a) This service is not responsible for the payment interface mentioned in the given payment resource. This service is responsible for the PAYONE interface only. b) (reserved for future cases)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "The configuration of the service does not allow this request (e.g. not on optional IP whitelist, optional required authentication not passed).",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Given resource could not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The given resource does not have the given version yet (platform not yet consistent) or any more (concurrent modification).",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/FooBar/listen": {
      "get": {
        "summary": "Receives notification / status calls (e.g. webhooks) from the PSP payment interfaces. Completely custom per payment interface implementation.",
        "responses": {
          "default": {
            "description": "PSP specific. Often just a string \"OK\"."
          }
        }
      }
    }
  },
  "definitions": {
    "PaymentStatus": {
      "type": "object",
      "required": [
        "statusCode",
        "message",
        "paymentVersion"
      ],
      "properties": {
        "statusCode": {
          "description": "The HTTP status code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "The description text of the Status as defined in this api definition (see responses description).",
          "type": "string"
        },
        "paymentVersion": {
          "type": "integer",
          "format": "int32",
          "description": "the last known version of the Payment Object handled (always the case). Implicitly communicates whether something has changed at all."
        },
        "cartVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The last known version of the Cart Object handled, if so. Implicitly communicates whether something has changed at all."
        },
        "orderVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The last known version of the Order Object handled, if so. Implicitly communicates whether something has changed at all."
        },
        "customerVersion": {
          "type": "integer",
          "format": "int32",
          "description": "The last known version of the Order Object handled, if so. Implicitly communicates whether something has changed at all."
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "statusCode",
        "message",
        "errors"
      ],
      "properties": {
        "statusCode": {
          "description": "The HTTP status code of the overall error situation. Must be equal to the actual HTTP status code sent.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "The description of the first error in the \"errors\" list.",
          "type": "string"
        },
        "errors": {
          "description": "The full list of errors that have occurred during processing the API request.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "description": "a free to choose error code for the specific situation.",
                "type": "string"
              },
              "message": {
                "description": "a matching free text description of the error.  Please be aware that passing error Information from the backend APIs may leak information.",
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
