swagger: '2.0'
info:
  title: commercetools payment microservice
  description: Control API of the Integration of the commercetools platform with a Payment Service Provider API
  version: 1.0.0
host: (projectId).(pspName)-payments.commercetools.io
schemes:
  - https
  - http
basePath: /api/v1/
produces:
  - application/json
paths:
  /commercetools/payments/handle:
    get:
      summary: |
        Trigger to force handling of a commerceotols payment object.
        Passing the Cart or Order instead of the Payment ID enables a more efficient implementation and is therefore preferable.
      parameters:
        - name: id
          in: query
          description: commercetools id of the Payment that should be handled or the Cart or Order whose referenced payment(s) should be handled.
          required: true
          type: string
        - name: resource
          in: query
          description: The resource type the given ID refers to.
          required: true
          type: string
          enum:
            - "Cart"
            - "Order"
            - "Payment"
        - name: version
          in: query
          description: last known version of the Cart, Order or Payment to be handled. Version allows more efficient implementation and protects against concurrent modification an not-yet-consistent state of the CT platform.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Found the Payment and successfully handled changes
          schema:
            $ref: '#/definitions/PaymentStatus'
        '202':
          description: Found the Payment, but the payment API could not immediately complete the necessary actions. Please try again later with the identical request.
          schema:
            $ref: '#/definitions/PaymentStatus'
        '403':
          description: The configuration of the service does not allow this request (e.g. not on optional IP whitelist, optional required authentication not passed etc.).
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Given Payment could not be found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Given Payment does not have the given version yet (platform not yet consistent) or any more (concurrent modification). The service can choose to retry in the former case.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /FooBar/listen:
    get:
      summary: Receives notification / status calls (e.g. webhooks) from the PSP payment interfaces. Completely custom per payment interface implementation.
      responses:
        default:
          description: PSP specific. often just a string "OK".
definitions:
  PaymentStatus:
    type: object
    properties:
      status:
        type: string
        description: minimal status description text. The value must not leak any data, it's rather a representation of the HTTP status code.
      newCartVersion:
        type: integer
        format: int32
        description: the last known version of the Cart Object passed via the cartId parameter. In some situations this can help the frontend implementation save one API call. Implicitly communicates, if something has changed at all.
      newOrderVersion:
        type: integer
        format: int32
        description: the last known version of the Order Object passed via the orderId parameter. In some situations this can help the frontend implementation save one API call. Implicitly communicates, if something has changed at all.
      newPaymentVersion:
        type: integer
        format: int32
        description: the last known version of the Payment Object passed via the paymentId parameter. If called via orderId and the respective Order references just one Payment, the last version of that payment. Otherwise not set. In some situations this can help the frontend implementation save one API call. Implicitly communicates, if something has changed at all.
  # This Error Object has the same structure as the commercetools API Error Objects. This allows a coherent pattern and maybe some re-use.
  Error:
    type: object
    properties:
      statusCode:
        type: integer
        format: int32
      message:
        type: string
      errors:
        type: array
        items:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
